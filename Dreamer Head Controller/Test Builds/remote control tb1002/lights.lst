


ARM Macro Assembler    Page 1 


    1 00000000         ; lights.s
    2 00000000         ; Contains code that generates control signals for WS281
                       2 LEDs.
    3 00000000         
    4 00000000         ; This file is part of Dreamer Head TestBuild0906
    5 00000000         ; Travis Llado, travis@travisllado.com
    6 00000000         ; Last modified 2016.10.12
    7 00000000         
    8 00000000 40006400 
                       PTC_DIR_R
                               EQU              0x40006400  ; GPIO direction
    9 00000000 40006420 
                       PTC_AFSEL_R
                               EQU              0x40006420  ; alternate functio
                                                            ns
   10 00000000 4000651C 
                       PTC_DEN_R
                               EQU              0x4000651C  ; GPIO select
   11 00000000 40006528 
                       PTC_AMSEL_R
                               EQU              0x40006528  ; analog functions
   12 00000000 4000652C 
                       PTC_PCTL_R
                               EQU              0x4000652C  ; port control
   13 00000000 400FE608 
                       RCGCGPIO_R
                               EQU              0x400FE608  ; port C clock
   14 00000000 00000004 
                       RCGC2_GPIOC
                               EQU              0x00000004  ; port C Clock Gati
                                                            ng Control
   15 00000000 400060C0 
                       LEDS    EQU              0x400060C0  ; access PC4-5
   16 00000000 00000030 
                       PINS_HIGH
                               EQU              0x00000030  ; write PC4-5 high
   17 00000000 00000000 
                       PINS_LOW
                               EQU              0x00000000  ; write PC4-5 low
   18 00000000 00000028 
                       NUM_LEDS
                               EQU              0x00000028  ; number of WS2812 
                                                            LEDs in series (40)
                                                            
   19 00000000 00800000 
                       BIT_MASK
                               EQU              0x00800000  ; masks bit 24, fir
                                                            st bit of LED signa
                                                            l
   20 00000000 00000004 
                       ZERO_HIGH
                               EQU              0x00000004  ; number of loops p
                                                            ins stay high for z
                                                            ero
   21 00000000 0000000A 
                       ONE_HIGH
                               EQU              0x0000000A  ; number of loops p
                                                            ins stay high for o
                                                            ne



ARM Macro Assembler    Page 2 


   22 00000000 00000008 
                       BOTH_LOW
                               EQU              0x00000008  ; number of loops p
                                                            ins stay low for ei
                                                            ther
   23 00000000         
   24 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   25 00000000                 THUMB
   26 00000000                 EXPORT           lightsInit
   27 00000000                 EXPORT           lightsUpdate
   28 00000000         
   29 00000000         lightsInit
   30 00000000 E92D 4FF0       PUSH             {R4-R11, LR} ; push current LR 
                                                            to stack
   31 00000004         ; 1) activate clock for Port C
   32 00000004 492B            LDR              R1, =RCGCGPIO_R
   33 00000006 6808            LDR              R0, [R1]
   34 00000008 F040 0004       ORR              R0, R0, #RCGC2_GPIOC ; clock
   35 0000000C 6008            STR              R0, [R1]
   36 0000000E BF00            NOP                          ; allow time to fin
                                                            ish activating
   37 00000010 BF00            NOP
   38 00000012         ; 3) disable analog functionality
   39 00000012 4929            LDR              R1, =PTC_AMSEL_R
   40 00000014 6808            LDR              R0, [R1]
   41 00000016 F020 0030       BIC              R0, R0, #0x30 ; disable analog 
                                                            functionality on PC
                                                            4/5
   42 0000001A 6008            STR              R0, [R1]
   43 0000001C         ; 4) configure as GPIO
   44 0000001C 4927            LDR              R1, =PTC_PCTL_R
   45 0000001E 6808            LDR              R0, [R1]
   46 00000020 F420 007F       BIC              R0, R0, #0x00FF0000 ; clear por
                                                            t control field for
                                                             PC4/5
   47 00000024 6008            STR              R0, [R1]
   48 00000026         ; 5) set direction register
   49 00000026 4926            LDR              R1, =PTC_DIR_R
   50 00000028 6808            LDR              R0, [R1]
   51 0000002A F040 0030       ORR              R0, R0, #0x30 
                                                            ; make PC4/5 output
                                                            
   52 0000002E 6008            STR              R0, [R1]
   53 00000030         ; 6) regular port function
   54 00000030 4924            LDR              R1, =PTC_AFSEL_R
   55 00000032 6808            LDR              R0, [R1]
   56 00000034 F020 0030       BIC              R0, R0, #0x30 ; disable alt fun
                                                            ct on PC4/5
   57 00000038 6008            STR              R0, [R1]
   58 0000003A         ; 7) enable digital port
   59 0000003A 4923            LDR              R1, =PTC_DEN_R
   60 0000003C 6808            LDR              R0, [R1]
   61 0000003E F040 0030       ORR              R0, R0, #0x30 ; enable digital 
                                                            I/O on PC4/5
   62 00000042 6008            STR              R0, [R1]
   63 00000044         ; Return
   64 00000044 E8BD 4FF0       POP              {R4-R11, LR} ; pull previous LR
                                                             from stack



ARM Macro Assembler    Page 3 


   65 00000048 4770            BX               LR          ; return
   66 0000004A         
   67 0000004A         lightsUpdate                         ; write arbitrary c
                                                            olor value to all e
                                                            ar lights
   68 0000004A E92D 4FF0       PUSH             {R4-R11, LR} ; push previous R4
                                                            -R11, LR values to 
                                                            stack
   69 0000004E         ; received argument     ; R0 = color value to be written
                       
   70 0000004E 491F            LDR              R1, =LEDS   ; R1 = register tha
                                                            t controls Port C G
                                                            PIO Pins
   71 00000050 F04F 0230       LDR              R2, =PINS_HIGH ; R2 = value tha
                                                            t sets PC4-5 high
   72 00000054 F04F 0300       LDR              R3, =PINS_LOW ; R3 = value that
                                                             sets PC4-5 low
   73 00000058 F04F 0428       LDR              R4, =NUM_LEDS ; R4 = number of 
                                                            LEDs, times light l
                                                            oop runs
   74 0000005C F04F 0502       MOV              R5, #2      ; R5 = 2, used to s
                                                            hift values left by
                                                             one bit
   75 00000060         nextLight                            ; write new color t
                                                            o single LED
   76 00000060 F44F 0600       LDR              R6, =BIT_MASK ; load BIT_MASK i
                                                            nto R6
   77 00000064         nextBit                              ; write single bit 
                                                            to current LED
   78 00000064 EA00 0706       AND              R7, R0, R6  ; extract next bit 
                                                            to be written
   79 00000068 FBB7 F7F6       UDIV             R7, R6      ; shift next bit to
                                                             1's column
   80 0000006C FBB6 F6F5       UDIV             R6, R5      ; shift BIT_MASK on
                                                            e place down
   81 00000070         ; Determine next bit to be written
   82 00000070 2F00            CMP              R7, #0      ; compare next bit 
                                                            value to zero
   83 00000072 BF14            ITE              NE          ; are they NOT equa
                                                            l?
   84 00000074 F04F 080A       LDRNE            R8, =ONE_HIGH ; if yes, then se
                                                            t timing for one hi
                                                            gh
   85 00000078 F04F 0804       LDREQ            R8, =ZERO_HIGH ; if no, then se
                                                            t timing for zero h
                                                            igh
   86 0000007C 600A            STR              R2, [R1]    ; set PC4-5 high
   87 0000007E         waitHigh                             ; Wait required tim
                                                            e with GPIO pins hi
                                                            gh
   88 0000007E F1A8 0801       SUB              R8, #1      ; decrement loop co
                                                            unter
   89 00000082 F1B8 0F00       CMP              R8, #0      ; compare loop coun
                                                            ter value to 0
   90 00000086 BF18            IT               NE          ; are they not equa
                                                            l?
   91 00000088 E7F9            BNE              waitHigh    ; if yes, then wait
                                                             again
   92 0000008A F04F 0808       LDR              R8, =BOTH_LOW ; set timing for 



ARM Macro Assembler    Page 4 


                                                            low
   93 0000008E 600B            STR              R3, [R1]    ; set PC4-5 low
   94 00000090         waitLow                              ; Wait required tim
                                                            e with GPIO pins lo
                                                            w
   95 00000090 F1A8 0801       SUB              R8, #1      ; decrement loop co
                                                            unter
   96 00000094 F1B8 0F00       CMP              R8, #0      ; compare loop coun
                                                            ter value to exit v
                                                            alue
   97 00000098 BF18            IT               NE          ; are they not equa
                                                            l?
   98 0000009A E7F9            BNE              waitLow     ; if yes, then wait
                                                             again
   99 0000009C         ; Check whether or not current light is complete
  100 0000009C 2E00            CMP              R6, #0      ; compare BIT_MASKv
                                                            alue to zero
  101 0000009E BF18            IT               NE          ; are they not equa
                                                            l?
  102 000000A0 E7E0            BNE              nextBit     ; if yes, then writ
                                                            e another bit
  103 000000A2         ; Check whether current string of lights is complete
  104 000000A2 F1A4 0401       SUB              R4, #1      ; decrement LED cou
                                                            nter
  105 000000A6 2C00            CMP              R4, #0      ; compare LED count
                                                            er value to zero
  106 000000A8 BF18            IT               NE          ; are they not equa
                                                            l?
  107 000000AA E7D9            BNE              nextLight   ; if yes, then writ
                                                            e another light
  108 000000AC         ; Return
  109 000000AC E8BD 4FF0       POP              {R4-R11, LR} ; pull previous R4
                                                            -R11, LR values fro
                                                            m stack
  110 000000B0 4770            BX               LR          ; return
  111 000000B2         
  112 000000B2 00 00           ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  113 000000B4                 END                          ; end of file
              400FE608 
              40006528 
              4000652C 
              40006400 
              40006420 
              4000651C 
              400060C0 
Command Line: --debug --xref --cpu=Cortex-M4 --apcs=interwork --depend=.\lights
.d -o.\lights.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\AR
M\Inc\Luminary --predefine="__EVAL SETA 1" --list=.\lights.lst lights.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 24 in file lights.s
   Uses
      None
Comment: .text unused
lightsInit 00000000

Symbol: lightsInit
   Definitions
      At line 29 in file lights.s
   Uses
      At line 26 in file lights.s
Comment: lightsInit used once
lightsUpdate 0000004A

Symbol: lightsUpdate
   Definitions
      At line 67 in file lights.s
   Uses
      At line 27 in file lights.s
Comment: lightsUpdate used once
nextBit 00000064

Symbol: nextBit
   Definitions
      At line 77 in file lights.s
   Uses
      At line 102 in file lights.s
Comment: nextBit used once
nextLight 00000060

Symbol: nextLight
   Definitions
      At line 75 in file lights.s
   Uses
      At line 107 in file lights.s
Comment: nextLight used once
waitHigh 0000007E

Symbol: waitHigh
   Definitions
      At line 87 in file lights.s
   Uses
      At line 91 in file lights.s
Comment: waitHigh used once
waitLow 00000090

Symbol: waitLow
   Definitions
      At line 94 in file lights.s
   Uses
      At line 98 in file lights.s
Comment: waitLow used once
7 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

BIT_MASK 00800000

Symbol: BIT_MASK
   Definitions
      At line 19 in file lights.s
   Uses
      At line 76 in file lights.s
Comment: BIT_MASK used once
BOTH_LOW 00000008

Symbol: BOTH_LOW
   Definitions
      At line 22 in file lights.s
   Uses
      At line 92 in file lights.s
Comment: BOTH_LOW used once
LEDS 400060C0

Symbol: LEDS
   Definitions
      At line 15 in file lights.s
   Uses
      At line 70 in file lights.s
Comment: LEDS used once
NUM_LEDS 00000028

Symbol: NUM_LEDS
   Definitions
      At line 18 in file lights.s
   Uses
      At line 73 in file lights.s
Comment: NUM_LEDS used once
ONE_HIGH 0000000A

Symbol: ONE_HIGH
   Definitions
      At line 21 in file lights.s
   Uses
      At line 84 in file lights.s
Comment: ONE_HIGH used once
PINS_HIGH 00000030

Symbol: PINS_HIGH
   Definitions
      At line 16 in file lights.s
   Uses
      At line 71 in file lights.s
Comment: PINS_HIGH used once
PINS_LOW 00000000

Symbol: PINS_LOW
   Definitions
      At line 17 in file lights.s
   Uses
      At line 72 in file lights.s
Comment: PINS_LOW used once
PTC_AFSEL_R 40006420

Symbol: PTC_AFSEL_R



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

   Definitions
      At line 9 in file lights.s
   Uses
      At line 54 in file lights.s
Comment: PTC_AFSEL_R used once
PTC_AMSEL_R 40006528

Symbol: PTC_AMSEL_R
   Definitions
      At line 11 in file lights.s
   Uses
      At line 39 in file lights.s
Comment: PTC_AMSEL_R used once
PTC_DEN_R 4000651C

Symbol: PTC_DEN_R
   Definitions
      At line 10 in file lights.s
   Uses
      At line 59 in file lights.s
Comment: PTC_DEN_R used once
PTC_DIR_R 40006400

Symbol: PTC_DIR_R
   Definitions
      At line 8 in file lights.s
   Uses
      At line 49 in file lights.s
Comment: PTC_DIR_R used once
PTC_PCTL_R 4000652C

Symbol: PTC_PCTL_R
   Definitions
      At line 12 in file lights.s
   Uses
      At line 44 in file lights.s
Comment: PTC_PCTL_R used once
RCGC2_GPIOC 00000004

Symbol: RCGC2_GPIOC
   Definitions
      At line 14 in file lights.s
   Uses
      At line 34 in file lights.s
Comment: RCGC2_GPIOC used once
RCGCGPIO_R 400FE608

Symbol: RCGCGPIO_R
   Definitions
      At line 13 in file lights.s
   Uses
      At line 32 in file lights.s
Comment: RCGCGPIO_R used once
ZERO_HIGH 00000004

Symbol: ZERO_HIGH
   Definitions
      At line 20 in file lights.s
   Uses



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

      At line 85 in file lights.s
Comment: ZERO_HIGH used once
15 symbols
355 symbols in table
